{"version":3,"sources":["components/Center/Center.tsx","components/Navigation/Navigation.tsx","components/src/utils/isVisible.ts","components/src/utils/throttle.ts","components/src/index.tsx","components/src/ScrollSpy/ScrollSpy.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Center","children","backgroundColor","id","styles","display","justifyContent","alignItems","height","style","Navigation","props","onPress","e","preventDefault","target","window","document","getElementById","currentTarget","href","split","scrollIntoView","behavior","position","width","onClick","className","isVisible","el","offsetTop","offsetBottom","scrollableComponentRef","rectInView","getBoundingClientRect","leniency","offsetHeight","innerHeight","useHeight","top","bottom","throttle","callback","limit","tick","setTimeout","ScrollSpy","navContainerRef","parentScrollContainerRef","scrollThrottle","onUpdateCallback","useDataAttribute","activeClass","scrollContainerRef","useRef","useState","navContainerItems","setNavContainerItems","prevIdTracker","useEffect","current","querySelectorAll","checkAndUpdateActiveScrollSpy","scrollParentContainer","i","length","useChild","item","changeHighlightedItemId","forEach","attrId","getAttribute","classList","contains","remove","add","history","pushState","addEventListener","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oKA4BeA,EApBA,SAAC,GAII,IAHlBC,EAGiB,EAHjBA,SAGiB,IAFjBC,uBAEiB,MAFC,mBAED,EADjBC,EACiB,EADjBA,GAEMC,EAAwB,CAC5BC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,QACRN,gBAAiBA,GAGnB,OACE,qBAAKC,GAAIA,EAAIM,MAAOL,EAApB,SACGH,KC+BQS,EAlDI,SAACC,GAClB,IAAMC,EAAU,SAACC,GACfA,EAAEC,iBACF,IAAMC,EAASC,OAAOC,SAASC,eAC7BL,EAAEM,cAAcC,KAAKC,MAAM,KAAK,IAE9BN,GACFA,EAAOO,eAAe,CAAEC,SAAU,YAItC,OACE,qBACEd,MAAO,CACLe,SAAU,QACVtB,gBAAiB,QACjBuB,MAAO,QAJX,SAOE,sBACEhB,MAAO,CACLJ,QAAS,OACTC,eAAgB,UAHpB,UAME,mBAAGoB,QAAS,SAACb,GAAD,OAAOD,EAAQC,IAAIO,KAAK,UAApC,SACE,qBAAK,uBAAqB,SAASO,UAAW,UAA9C,sBAIF,mBAAGD,QAAS,SAACb,GAAD,OAAOD,EAAQC,IAAIO,KAAK,SAApC,SACE,qBAAK,uBAAqB,QAAQO,UAAW,UAA7C,qBAIF,mBAAGD,QAAS,SAACb,GAAD,OAAOD,EAAQC,IAAIO,KAAK,QAApC,SACE,qBAAK,uBAAqB,OAAOO,UAAW,UAA5C,oBAIF,mBAAGD,QAAS,SAACb,GAAD,OAAOD,EAAQC,IAAIO,KAAK,SAApC,SACE,qBAAK,uBAAqB,QAAQO,UAAW,UAA7C,2B,OC5CGC,EAAY,SACvBC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAaJ,EAAGK,wBAGhBC,EAAWH,EACyB,GAAtCA,EAAuBI,aACF,GAArBpB,OAAOqB,YAELC,EAAYN,EACdA,EAAuBI,aACvBpB,OAAOqB,YAEX,OACEJ,EAAWM,IAAMJ,EAAWL,GAAa,GACzCG,EAAWO,OAASL,EAAWJ,GAAgBO,GCpBtCG,EAAW,SAACC,EAAsBC,GAC7C,IAAIC,GAAO,EAEX,OAAO,WACAA,IACHF,IACAE,GAAO,EACPC,YAAW,WACTD,GAAO,IACND,MCPMG,EC+BG,SAAC,GAoBI,IAAD,EAnBpB7C,EAmBoB,EAnBpBA,SAGA8C,EAgBoB,EAhBpBA,gBACAC,EAeoB,EAfpBA,yBAeoB,IAZpBC,sBAYoB,MAZH,IAYG,EATpBC,EASoB,EATpBA,iBASoB,IANpBpB,iBAMoB,MANR,EAMQ,MALpBC,oBAKoB,MALL,EAKK,MAFpBoB,wBAEoB,MAFD,kBAEC,MADpBC,mBACoB,MADN,oBACM,EACdC,EAAqBC,iBAA8B,MACzD,EAAkDC,qBAAlD,mBAAOC,EAAP,KAA0BC,EAA1B,KAIMC,EAAgBJ,iBAAO,IAG7BK,qBAAU,WAAO,IAAD,EAEVF,EADJV,EACwB,UAClBA,EAAgBa,eADE,aAClB,EAAyBC,iBAAzB,gBACWV,EADX,MAKAlC,SAAS4C,iBAAT,gBAAmCV,EAAnC,SAIL,CAACJ,IAGJY,qBAAU,WACRG,MAGC,CAACN,IAEJ,IAAMM,EAAgC,WACpC,IAAMC,EAAwBV,EAAmBO,QAGjD,GAAMG,GAAyBP,EAG/B,IAAK,IAAIQ,EAAI,EAAGA,EAAID,EAAsB9D,SAASgE,OAAQD,IAAK,CAE9D,IAAME,EAAWH,EAAsB9D,SAASkE,KAAKH,GAYrD,GAVyBhB,EACrBpB,EACEsC,EACApC,EACAC,EAHO,OAIPiB,QAJO,IAIPA,OAJO,EAIPA,EAA0BY,SAE5BhC,EAAUsC,EAAUpC,EAAWC,GAGb,CAAC,IAAD,aAEpB,IAAMqC,EAA0BF,EAAS/D,GAGzC,OAAIuD,EAAcE,UAAYQ,EAA+B,CAAN,WAGvDZ,EAAkBa,SAAQ,SAACxC,GACzB,IAAMyC,EAASzC,EAAG0C,aAAH,eAAwBpB,IAGnCtB,EAAG2C,UAAUC,SAASrB,IACxBvB,EAAG2C,UAAUE,OAAOtB,GAMpBkB,IAAWF,GACVvC,EAAG2C,UAAUC,SAASrB,KAEvBvB,EAAG2C,UAAUG,IAAIvB,GAEbF,GACFA,EAAiBkB,GAGnBV,EAAcE,QAAUQ,EACxBpD,OAAO4D,QAAQC,UAAU,GAAI,GAA7B,WAAqCT,QAGzC,SAhCoB,kBAgCpB,MAhCoB,qCAkD1B,OAZApB,EAAwB,UAEpBA,EAAyBY,eAFL,OAEpB,EAAkCkB,iBAChC,SACArC,EAASqB,EAA+Bb,IAG1CjC,OAAO8D,iBACL,SACArC,EAASqB,EAA+Bb,IAGvC,qBAAK8B,IAAK1B,EAAV,SAA+BpD,KC5HzB+E,MAvBf,WACE,OACE,gCACE,cAAC,EAAD,IAEA,eAAC,EAAD,CAAW/B,eAAgB,IAA3B,UACE,cAAC,EAAD,CAAQ9C,GAAG,SAASD,gBAAiB,SAArC,SACE,0CAEF,cAAC,EAAD,CAAQC,GAAG,QAAQD,gBAAiB,QAApC,SACE,yCAEF,cAAC,EAAD,CAAQC,GAAG,OAAOD,gBAAiB,OAAnC,SACE,wCAEF,cAAC,EAAD,CAAQC,GAAG,QAAQD,gBAAiB,QAApC,SACE,gDCTK+E,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3E,SAASC,eAAe,SAM1B+D,K","file":"static/js/main.862b53ad.chunk.js","sourcesContent":["import React, { CSSProperties } from \"react\";\n\ninterface CenterProps {\n  children: React.ReactNode;\n  backgroundColor?: string;\n  id: string;\n}\n\nconst Center = ({\n  children,\n  backgroundColor = \"rgb(255,255,255)\",\n  id,\n}: CenterProps) => {\n  const styles: CSSProperties = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100vh\",\n    backgroundColor: backgroundColor,\n  };\n\n  return (\n    <div id={id} style={styles}>\n      {children}\n    </div>\n  );\n};\n\nexport default Center;\n","import React from \"react\";\n\ninterface Props {}\n\nconst Navigation = (props: Props) => {\n  const onPress = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n    e.preventDefault();\n    const target = window.document.getElementById(\n      e.currentTarget.href.split(\"#\")[1]\n    );\n    if (target) {\n      target.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        backgroundColor: \"beige\",\n        width: \"100%\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <a onClick={(e) => onPress(e)} href=\"#orange\">\n          <div data-to-scrollspy-id=\"orange\" className={\"ss-item\"}>\n            orange\n          </div>\n        </a>\n        <a onClick={(e) => onPress(e)} href=\"#brown\">\n          <div data-to-scrollspy-id=\"brown\" className={\"ss-item\"}>\n            brown\n          </div>\n        </a>\n        <a onClick={(e) => onPress(e)} href=\"#blue\">\n          <div data-to-scrollspy-id=\"blue\" className={\"ss-item\"}>\n            blue\n          </div>\n        </a>\n        <a onClick={(e) => onPress(e)} href=\"#green\">\n          <div data-to-scrollspy-id=\"green\" className={\"ss-item\"}>\n            green\n          </div>\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Navigation;\n","// to check if the element is in viewport\nexport const isVisible = (\n  el: HTMLElement,\n  offsetTop: number,\n  offsetBottom: number,\n  scrollableComponentRef?: HTMLDivElement | null\n) => {\n  const rectInView = el.getBoundingClientRect();\n\n  // this decides how much of the element should be visible\n  const leniency = scrollableComponentRef\n    ? scrollableComponentRef.offsetHeight * 0.5\n    : window.innerHeight * 0.5;\n\n  const useHeight = scrollableComponentRef\n    ? scrollableComponentRef.offsetHeight\n    : window.innerHeight;\n\n  return (\n    rectInView.top + leniency + offsetTop >= 0 &&\n    rectInView.bottom - leniency - offsetBottom <= useHeight\n  );\n};\n","export const throttle = (callback: () => void, limit: number) => {\n  var tick = false;\n\n  return () => {\n    if (!tick) {\n      callback();\n      tick = true;\n      setTimeout(function () {\n        tick = false;\n      }, limit);\n    }\n  };\n};\n","import ScrollSpy from \"./ScrollSpy/ScrollSpy\";\n\nexport default ScrollSpy;\n","import React from \"react\";\nimport {\n  MutableRefObject,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { isVisible } from \"../utils/isVisible\";\nimport { throttle } from \"../utils/throttle\";\n\ninterface ScrollSpyProps {\n  children: ReactNode;\n\n  // refs\n  navContainerRef?: MutableRefObject<HTMLDivElement | null>;\n  parentScrollContainerRef?: MutableRefObject<HTMLDivElement | null>;\n\n  // throttle\n  scrollThrottle?: number;\n\n  // callback\n  onUpdateCallback?: (id: string) => void;\n\n  // offsets\n  offsetTop?: number;\n  offsetBottom?: number;\n\n  // customize attributes\n  useDataAttribute?: string;\n  activeClass?: string;\n}\n\nconst ScrollSpy = ({\n  children,\n\n  // refs\n  navContainerRef,\n  parentScrollContainerRef,\n\n  // throttle\n  scrollThrottle = 300,\n\n  // callback\n  onUpdateCallback,\n\n  // offsets\n  offsetTop = 0,\n  offsetBottom = 0,\n\n  // customize attributes\n  useDataAttribute = \"to-scrollspy-id\",\n  activeClass = \"active-scroll-spy\",\n}: ScrollSpyProps) => {\n  const scrollContainerRef = useRef<HTMLDivElement | null>(null);\n  const [navContainerItems, setNavContainerItems] = useState<NodeListOf<Element> | undefined>(); // prettier-ignore\n\n  // keeps track of the Id in navcontainer which is active\n  // so as to not update classLists unless it has been updated\n  const prevIdTracker = useRef(\"\");\n\n  // To get the nav container items depending on whether the parent ref for the nav container is passed or not\n  useEffect(() => {\n    navContainerRef\n      ? setNavContainerItems(\n          navContainerRef.current?.querySelectorAll(\n            `[data-${useDataAttribute}]`\n          )\n        )\n      : setNavContainerItems(\n          document.querySelectorAll(`[data-${useDataAttribute}]`)\n        );\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [navContainerRef]);\n\n  // fire once after nav container items are set\n  useEffect(() => {\n    checkAndUpdateActiveScrollSpy();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [navContainerItems]);\n\n  const checkAndUpdateActiveScrollSpy = () => {\n    const scrollParentContainer = scrollContainerRef.current;\n\n    // if there are no children, return\n    if (!(scrollParentContainer && navContainerItems)) return;\n\n    // loop over all children in scroll container\n    for (let i = 0; i < scrollParentContainer.children.length; i++) {\n      // get child element\n      const useChild = scrollParentContainer.children.item(i) as HTMLDivElement;\n\n      const elementIsVisible = parentScrollContainerRef\n        ? isVisible(\n            useChild,\n            offsetTop,\n            offsetBottom,\n            parentScrollContainerRef?.current\n          )\n        : isVisible(useChild, offsetTop, offsetBottom);\n\n      // check if the element is in the viewport\n      if (elementIsVisible) {\n        // if so, get its ID\n        const changeHighlightedItemId = useChild.id;\n\n        // if the element was same as the one currently active ignore it\n        if (prevIdTracker.current === changeHighlightedItemId) return;\n\n        // now loop over each element in the nav Container\n        navContainerItems.forEach((el) => {\n          const attrId = el.getAttribute(`data-${useDataAttribute}`);\n\n          // if the element contains 'active' the class remove it\n          if (el.classList.contains(activeClass)) {\n            el.classList.remove(activeClass);\n          }\n\n          // check if its ID matches the ID we got from the viewport\n          // also make sure it does not already contain the 'active' class\n          if (\n            attrId === changeHighlightedItemId &&\n            !el.classList.contains(activeClass)\n          ) {\n            el.classList.add(activeClass);\n\n            if (onUpdateCallback) {\n              onUpdateCallback(changeHighlightedItemId);\n            }\n\n            prevIdTracker.current = changeHighlightedItemId;\n            window.history.pushState({}, \"\", `#${changeHighlightedItemId}`);\n          }\n        });\n        break;\n      }\n    }\n  };\n\n  // listen for scroll event\n  parentScrollContainerRef\n    ? // if ref for scrollable div is provided\n      parentScrollContainerRef.current?.addEventListener(\n        \"scroll\",\n        throttle(checkAndUpdateActiveScrollSpy, scrollThrottle)\n      )\n    : // else listen for scroll in window\n      window.addEventListener(\n        \"scroll\",\n        throttle(checkAndUpdateActiveScrollSpy, scrollThrottle)\n      );\n\n  return <div ref={scrollContainerRef}>{children}</div>;\n};\n\nexport default ScrollSpy;\n","import Center from \"./components/Center/Center\";\nimport Navigation from \"./components/Navigation/Navigation\";\n// eslint-disable-next-line\n// import ScrollSpy from \"react-ui-scrollspy\";\n// eslint-disable-next-line\nimport ScrollSpy from \"./components/src\";\n\nfunction App() {\n  return (\n    <div>\n      <Navigation />\n\n      <ScrollSpy scrollThrottle={100}>\n        <Center id=\"orange\" backgroundColor={\"orange\"}>\n          <h1>Orange</h1>\n        </Center>\n        <Center id=\"brown\" backgroundColor={\"brown\"}>\n          <h1>Brown</h1>\n        </Center>\n        <Center id=\"blue\" backgroundColor={\"blue\"}>\n          <h1>Blue</h1>\n        </Center>\n        <Center id=\"green\" backgroundColor={\"green\"}>\n          <h1>Green</h1>\n        </Center>\n      </ScrollSpy>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}